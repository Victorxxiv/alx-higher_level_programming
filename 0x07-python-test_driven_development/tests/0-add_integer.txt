# Run test cases for add_integer function

>>> add_integer = __import__('0-add_integer').add_integer

# Test Case 1: Adding zero values
>>> add_integer(0, 0)
0

# Test Case 2: Adding a positive integer and zero
>>> add_integer(15, 0)
15

# Test Case 3: Adding zero and a positive integer
>>> add_integer(0, 15)
15

# Test Case 4: Adding a negative integer and zero
>>> add_integer(-2, 2)
0

# Test Case 5: Adding zero and a negative integer
>>> add_integer(2, -2)
0

# Test Case 6: Using default value for b
>>> add_integer(2)
100

# Test Case 7: Missing one argument (Expecting TypeError)
>>> add_integer()
Traceback (most recent call last):
    ...
TypeError: add_integer() missing 1 required positional argument: 'a'

# Test Case 8: Missing both arguments (Expecting TypeError)
>>> add_integer('a', 'b')
Traceback (most recent call last):
    ...
TypeError: a must be an integer

# Test Case 9: Trying to add a string and an integer (Expecting TypeError)
>>> add_integer('a', 42)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

# Test Case 10: Trying to add a string (Expecting TypeError)
>>> add_integer('a')
Traceback (most recent call last):
    ...
TypeError: a must be an integer

# Test Case 11: Trying to add an integer and a string (Expecting TypeError)
>>> add_integer(42, 'b')
Traceback (most recent call last):
    ...
TypeError: b must be an integer

# Test Case 12: Float overflow (Expecting OverflowError)
>>> add_integer(float('inf'), 0)
Traceback (most recent call last):
    ...
OverflowError: cannot convert float infinity to integer

# Test Case 13: Adding zero and NaN (Expecting ValueError)
>>> add_integer(0, float('nan'))
Traceback (most recent call last):
    ...
ValueError: cannot convert float NaN to integer
